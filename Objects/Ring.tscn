[gd_scene load_steps=7 format=2]

[ext_resource path="res://Assets/Szenen/Ring.glb" type="PackedScene" id=1]
[ext_resource path="res://Assets/Szenen/RingMat_normal.png" type="Texture" id=2]
[ext_resource path="res://Assets/Szenen/RingMat_orm.png" type="Texture" id=3]
[ext_resource path="res://Assets/Szenen/RingMat_emission.png" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

vec3 fresnel_glow(float amount, float intensity, vec3 color, vec3 normal, vec3 view)
{
	return pow((1.0 - dot(normalize(normal), normalize(view))), amount) * color * intensity;
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);

	METALLIC = metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	
	// fresnel stuff
	vec3 fresnel = fresnel_glow(4.0, 4.5, emission.rgb, NORMAL, VIEW);

	ALBEDO = albedo.rgb * albedo_tex.rgb;	
	EMISSION = (emission_tex + fresnel) * emission_energy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/albedo = Color( 0.61, 0.49776, 0.0488, 1 )
shader_param/specular = 0.5
shader_param/metallic = 1.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/roughness_texture_channel = Plane( 0, 1, 0, 0 )
shader_param/emission = Color( 0.309804, 0.290196, 0.00392157, 1 )
shader_param/emission_energy = 5.0
shader_param/normal_scale = 1.09
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_roughness = ExtResource( 3 )
shader_param/texture_emission = ExtResource( 4 )
shader_param/texture_normal = ExtResource( 2 )

[node name="Ring" instance=ExtResource( 1 )]

[node name="Cylinder" parent="." index="0"]
material/0 = SubResource( 2 )

[node name="Camera" type="Camera" parent="." index="5"]
transform = Transform( 1, 0, 0, 0, 0.978191, 0.207707, 0, -0.207707, 0.978191, 0, 3.78711, 7.50308 )
