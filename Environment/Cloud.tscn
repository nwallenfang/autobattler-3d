[gd_scene load_steps=6 format=2]

[sub_resource type="Shader" id=6]
code = "shader_type particles;

uniform float x_radius = 3.5;
uniform float y_diff_max = 0.75;
uniform float z_radius = 8.0;

const float PI = 3.14159;

float rand_from_seed(in uint seed) {
  int k;
  int s = int(seed);
  if (s == 0)
    s = 305420679;
  k = s / 127773;
  s = 16807 * (s - k * 127773) - 2836 * k;
  if (s < 0)
    s += 2147483647;
  seed = uint(s);
  return float(seed % uint(65536)) / 65535.0;
}

uint hash(uint x) {
  x = ((x >> uint(16)) ^ x) * uint(73244475);
  x = ((x >> uint(16)) ^ x) * uint(73244475);
  x = (x >> uint(16)) ^ x;
  return x;
}

void vertex() {
	// don't think I'll need this for my use case
	float outward_amount = 1.0;
	float angular_spacing = 0.5;
	
	if(RESTART) {
		float index = float(INDEX); // funny line of code :)
		float rand1 = rand_from_seed(hash(uint(index)));
		float rand2 = rand_from_seed(hash(uint(index + 1.0)));
		float rand3 = rand_from_seed(hash(uint(index + 2.0)));
		
		// reference: https://stackoverflow.com/questions/48036546/how-to-draw-random-points-inside-an-ellipse-matlab
		float t = 2.0 * PI * rand1;
		float d = sqrt(rand2);
		float x = x_radius * d * cos(t);
		float y = y_diff_max * rand3;
		float z = z_radius * d * sin(t);
		TRANSFORM[3].xyz = vec3(x, y, z); 	 
	}

	
}"

[sub_resource type="ShaderMaterial" id=7]
render_priority = 1
shader = SubResource( 6 )
shader_param/x_radius = 3.5
shader_param/y_diff_max = 0.75
shader_param/z_radius = 8.0

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode unshaded;

uniform sampler2D sky_gradient;
uniform float diameter = 100.0;
uniform float band_size = 0.1;
uniform float interp_value = 0.0;

float dist_from_sun(vec3 position) {
	float radius = diameter / 2.0;
	float dist = mix(interp_value - band_size/2.0, interp_value + band_size/2.0, 1.0 + position.z/radius);
	return dist;
}

void fragment() {
	vec4 world_frag_pos = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	float dist = dist_from_sun(world_frag_pos.xyz);
	// TODO proper color
//	vec3 sampled_color = texture(sky_gradient, vec2(world_frag_pos.x + , 0)).rgb;
	vec3 world_normal = NORMAL * mat3(INV_CAMERA_MATRIX);

//	ALBEDO = sampled_color;
	
	if(world_normal.y < 0.0) {
		ALBEDO = sampled_color - vec3(0.08);
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="SphereMesh" id=3]
material = SubResource( 2 )

[node name="Cloud" type="Spatial"]

[node name="Particles" type="Particles" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.243023, 0.55596, 0 )
amount = 90
lifetime = 20.55
process_material = SubResource( 7 )
draw_pass_1 = SubResource( 3 )
